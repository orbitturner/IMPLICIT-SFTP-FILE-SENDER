# For any further Help Contact Orbit Turner @ orbitturner.com
Get-EventSubscriber | Unregister-Event
Write-Host("=========================================================================");
Write-Host("   ____  _____  ____ _____ _______    _____ ______ _______ _____  ");
Write-Host("  / __ \|  __ \|  _ \_   _|__   __|  / ____|  ____|__   __|  __ \ ");
Write-Host(" | |  | | |__) | |_) || |    | |    | (___ | |__     | |  | |__) |");
Write-Host(" | |  | |  _  /|  _ < | |    | |     \___ \|  __|    | |  |  ___/ ");
Write-Host(" | |__| | | \ \| |_) || |_   | |     ____) | |       | |  | |     ");
Write-Host("  \____/|_|  \_\____/_____|  |_|    |_____/|_|       |_|  |_|     ");
Write-Host("-------------------------------------------------------------------------");
Write-Host("  This Program trigger an SFTP Upload everytime a File");
Write-Host("      is Deposed into the [CONTAINER] Folder.");
Write-Host("=========================================================================");

function Logger {

  param (
      $msg
  )
  Write-Host("")
  Write-Output ("[$(Get-Date)] ~~> $msg")
  $logline = "$(Get-Date), $msg"
  Add-content ".\ScriptProcess_log.txt" -value $logline

}

### SET FOLDER TO WATCH + FILES TO WATCH + SUBFOLDERS YES/NO
$filewatcher = New-Object System.IO.FileSystemWatcher
#Mention the folder to monitor
$filewatcher.Path = ".\CONTAINER\"
$filewatcher.Filter = "*.*"
#include subdirectories $true/$false
$filewatcher.IncludeSubdirectories = $true
$filewatcher.EnableRaisingEvents = $true  
### DEFINE ACTIONS AFTER AN EVENT IS DETECTED
$writeaction = { $path = $Event.SourceEventArgs.FullPath
            $changeType = $Event.SourceEventArgs.ChangeType
            $logline = "$(Get-Date), $changeType, $path"
            Add-content ".\FileWatcher_log.txt" -value $logline
            $script = $PSScriptRoot+"\SFTP-UPLOADER.ps1"
            & $script
          } 

Logger("Starting Watchers for file detection");


try {
  ### DECIDE WHICH EVENTS SHOULD BE WATCHED 
  #The Register-ObjectEvent cmdlet subscribes to events that are generated by .NET objects on the local computer or on a remote computer.
  #When the subscribed event is raised, it is added to the event queue in your session. To get events in the event queue, use the Get-Event cmdlet.
  Register-ObjectEvent $filewatcher "Created" -Action $writeaction
  Register-ObjectEvent $filewatcher "Changed" -Action $writeaction
  # Register-ObjectEvent $filewatcher "Deleted" -Action $writeaction
  Register-ObjectEvent $filewatcher "Renamed" -Action $writeaction
  Logger("WATCHERS WERE SUCCESSFULLY STARTED");
}
catch {
  Logger("[!XX ERROR XX!] CAN'T START WATCHERS [!XX ERROR XX!]");
  exit(1);
}

while ($true) {sleep 5}